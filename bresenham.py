import matplotlib.pyplot as plt

def bresenham_line(x1, y1, x2, y2):
    """
    Bresenham's Line Drawing Algorithm
    Parameters:
        x1, y1: Starting point of the line
        x2, y2: Ending point of the line
    Returns:
        A list of pixel coordinates representing the line
    """
    points = []

    # Calculate differences
    dx = x2 - x1
    dy = y2 - y1

    # Initialize the decision parameter
    d = 2 * dy - dx

    # Initial coordinates
    x, y = x1, y1

    # Add the initial point
    points.append((x, y))

    # Loop through all x values
    while x < x2:
        if d < 0:
            # East (E) pixel
            d += 2 * dy
        else:
            # North-East (NE) pixel
            d += 2 * (dy - dx)
            y += 1
        x += 1

        # Add the calculated point to the list
        points.append((x, y))

    return points

def plot_bresenham_line(x1, y1, x2, y2):
    """
    Plots the line generated by Bresenham's algorithm.
    """
    # Get the rasterized line points
    line_points = bresenham_line(x1, y1, x2, y2)
    
    # Separate x and y coordinates for plotting
    x_coords, y_coords = zip(*line_points)
    
    # Plot the line points
    plt.figure(figsize=(6, 6))
    plt.plot(x_coords, y_coords, marker='o', color='blue', label="Bresenham Line")
    plt.title("Bresenham's Line Algorithm Visualization")
    plt.xlabel("X")
    plt.ylabel("Y")
    plt.grid(True, which="both", linestyle="--", linewidth=0.5)
    plt.xticks(range(min(x_coords) - 1, max(x_coords) + 2))
    plt.yticks(range(min(y_coords) - 1, max(y_coords) + 2))
    plt.legend()
    plt.show()

# Example Usage
if __name__ == "__main__":
    x1, y1 = 2, 2  # Start point
    x2, y2 = 10, 6  # End point

    line_points = plot_bresenham_line(x1, y1, x2, y2)
    print(line_points)
